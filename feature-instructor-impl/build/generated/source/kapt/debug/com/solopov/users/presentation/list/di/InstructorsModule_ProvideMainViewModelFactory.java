// Generated by Dagger (https://dagger.dev).
package com.solopov.users.presentation.list.di;

import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import com.solopov.feature_instructor_impl.presentation.list.InstructorsViewModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class InstructorsModule_ProvideMainViewModelFactory implements Factory<InstructorsViewModel> {
  private final InstructorsModule module;

  private final Provider<Fragment> fragmentProvider;

  private final Provider<ViewModelProvider.Factory> factoryProvider;

  public InstructorsModule_ProvideMainViewModelFactory(InstructorsModule module,
      Provider<Fragment> fragmentProvider, Provider<ViewModelProvider.Factory> factoryProvider) {
    this.module = module;
    this.fragmentProvider = fragmentProvider;
    this.factoryProvider = factoryProvider;
  }

  @Override
  public InstructorsViewModel get() {
    return provideMainViewModel(module, fragmentProvider.get(), factoryProvider.get());
  }

  public static InstructorsModule_ProvideMainViewModelFactory create(InstructorsModule module,
      Provider<Fragment> fragmentProvider, Provider<ViewModelProvider.Factory> factoryProvider) {
    return new InstructorsModule_ProvideMainViewModelFactory(module, fragmentProvider, factoryProvider);
  }

  public static InstructorsViewModel provideMainViewModel(InstructorsModule instance,
      Fragment fragment, ViewModelProvider.Factory factory) {
    return Preconditions.checkNotNullFromProvides(instance.provideMainViewModel(fragment, factory));
  }
}
