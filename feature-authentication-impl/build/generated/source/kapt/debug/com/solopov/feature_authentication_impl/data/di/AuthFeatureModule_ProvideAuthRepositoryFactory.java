// Generated by Dagger (https://dagger.dev).
package com.solopov.feature_authentication_impl.data.di;

import com.solopov.feature_authentication_api.domain.interfaces.AuthRepository;
import com.solopov.feature_authentication_impl.data.repository.AuthRepositoryImpl;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("com.solopov.common.di.scope.FeatureScope")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthFeatureModule_ProvideAuthRepositoryFactory implements Factory<AuthRepository> {
  private final AuthFeatureModule module;

  private final Provider<AuthRepositoryImpl> authRepositoryProvider;

  public AuthFeatureModule_ProvideAuthRepositoryFactory(AuthFeatureModule module,
      Provider<AuthRepositoryImpl> authRepositoryProvider) {
    this.module = module;
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public AuthRepository get() {
    return provideAuthRepository(module, authRepositoryProvider.get());
  }

  public static AuthFeatureModule_ProvideAuthRepositoryFactory create(AuthFeatureModule module,
      Provider<AuthRepositoryImpl> authRepositoryProvider) {
    return new AuthFeatureModule_ProvideAuthRepositoryFactory(module, authRepositoryProvider);
  }

  public static AuthRepository provideAuthRepository(AuthFeatureModule instance,
      AuthRepositoryImpl authRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideAuthRepository(authRepository));
  }
}
