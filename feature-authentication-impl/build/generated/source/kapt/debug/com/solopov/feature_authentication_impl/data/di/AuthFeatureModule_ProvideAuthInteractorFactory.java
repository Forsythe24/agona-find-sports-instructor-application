// Generated by Dagger (https://dagger.dev).
package com.solopov.feature_authentication_impl.data.di;

import com.solopov.feature_authentication_api.domain.interfaces.AuthInteractor;
import com.solopov.feature_authentication_api.domain.interfaces.AuthRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("com.solopov.common.di.scope.FeatureScope")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthFeatureModule_ProvideAuthInteractorFactory implements Factory<AuthInteractor> {
  private final AuthFeatureModule module;

  private final Provider<AuthRepository> authRepositoryProvider;

  public AuthFeatureModule_ProvideAuthInteractorFactory(AuthFeatureModule module,
      Provider<AuthRepository> authRepositoryProvider) {
    this.module = module;
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public AuthInteractor get() {
    return provideAuthInteractor(module, authRepositoryProvider.get());
  }

  public static AuthFeatureModule_ProvideAuthInteractorFactory create(AuthFeatureModule module,
      Provider<AuthRepository> authRepositoryProvider) {
    return new AuthFeatureModule_ProvideAuthInteractorFactory(module, authRepositoryProvider);
  }

  public static AuthInteractor provideAuthInteractor(AuthFeatureModule instance,
      AuthRepository authRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideAuthInteractor(authRepository));
  }
}
